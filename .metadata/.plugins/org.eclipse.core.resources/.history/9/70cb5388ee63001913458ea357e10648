
/**
 * Implements tests to check the functionality of HelpDesk
 * 
 * @author Travis Cao
 */
public class HelpDeskTestSuite extends HelpDesk {

  /**
   * Main method to call all testing methods
   * 
   * @param args Arguments of the testing commands
   */
  public static void main(String[] args) {
    System.out.println("=== TESING BEGINS ===" + System.lineSeparator());
    System.out.println("testCompareTo(): " + testCompareTo() + System.lineSeparator());
    System.out.println("=== TESTING CONCLUDES ====");
  }

  /**
   * Constructor included so that this class extends HelpDesk and can access its protected methods;
   * no actual HelpDeskTestSuite object will be created
   * 
   * @param capacity The fixed capacity for the amount of tickets a HelpDesk can handle
   */
  public HelpDeskTestSuite(int capacity) {
    super(capacity);
  }

  // Testing methods
  /**
   * Tests that when comparing two SupportTicket objects, correct comparison result is given
   * 
   * @return true if the test passed; false otherwise
   */
  public static boolean testCompareTo() {
    boolean testPassed = false;
    boolean subtest1 = false;
    boolean subtest2 = false;
    boolean subtest3 = false;

    SupportTicket ticket1 = new SupportTicket("Aaaaaa");
    SupportTicket ticket2 = new SupportTicket("Higher priority");
    SupportTicket ticket3 = new SupportTicket("Aaaaab");

    if (ticket1.compareTo(ticket2) < 0) {
      subtest1 = true;
    } else {
      System.out.println("Problem detected: longer tickets should have higher priority. But, it was"
          + " not the case.");
    }

    if (ticket1.compareTo(ticket3) < 0) {
      subtest2 = true;
    } else {
      System.out.println("Problem detected: when tickets have the same length, lexicographic order "
          + "should be used to determine order. But, it was not the case.");
    }

    if (ticket2.compareTo(ticket3) > 0) {
      subtest3 = true;
    } else {
      System.out.println("Problem detected: longer tickets should have higher priority. But, it was"
          + " not the case.");
    }

    if (subtest1 && subtest2 && subtest3) {
      testPassed = true;
    }

    return testPassed;
  }

  /**
   * Tests the createNewTicket() method of HelpDesk generates the correct order of priority queue
   * 
   * @return true if the test passed; false otherwise
   */
  public static boolean testCreateNewTicketPreserveOrder() {
    boolean testPassed = false;
    boolean subtest1 = false;
    boolean subtest2 = false;

    try {
      HelpDesk hd = new HelpDesk(10);
      hd.createNewTicket("A");
      hd.createNewTicket("Longer message");
      hd.createNewTicket("Something of high priority");
      hd.createNewTicket("Ticket");
      hd.createNewTicket("A super super super super super long ticket");
      hd.createNewTicket("b");

      if (hd.size == 6) {
        subtest1 = true;
      } else {
        System.out.println("Problem detected: after adding 6 tickets to HelpDesk, the size of "
            + "the heap should be 6. Instead, it returned " + hd.size);
      }

      if (hd.array[0].toString().equals("A super super super super super long ticket")
          && hd.array[1].toString().equals("Something of high priority")
          && hd.array[2].toString().equals("Longer message")
          && hd.array[3].toString().equals("Ticket") && hd.array[4].toString().equals("A")
          && hd.array[5].toString().equals("b")) {
        subtest2 = true;
      } else {
        System.out.println("Problem detected: adding to this HelpDesk priority queue, the order of"
            + " the priority queue is lost.");
      }
      
      if (subtest1 && subtest2) {
        testPassed = true; 
      }

    } catch (Exception e) {
      System.out.println("Problem detected: unexpected Exception thrown from creating new tickets. "
          + "The Exception's message is " + e.getMessage());
    }

    return testPassed;
  }

  /**
   * Tests the createNewTicket() method of HelpDesk
   * 
   * @return true if the test passed; false otherwise
   */
  public static boolean testCreateNewTicket() {
    boolean testPassed = false;

    try {

    } catch (Exception e) {
      System.out.println("Problem detected: unexpected Exception thrown from creating new tickets. "
          + "The Exception's message is " + e.getMessage());
    }

    return testPassed;
  }

}
